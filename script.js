const symbols = [
    { icon: '7Ô∏è‚É£', weight: 1, name: 'seven', label: 'SEVEN', value: 100 },    // –°–∞–º—ã–π —Ä–µ–¥–∫–∏–π, —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π
    { icon: 'üíé', weight: 2, name: 'diamond', label: 'DIAM', value: 50 },    // –†–µ–¥–∫–∏–π, –æ—á–µ–Ω—å —Ü–µ–Ω–Ω—ã–π
    { icon: 'üé∞', weight: 3, name: 'slot', label: 'SLOT', value: 25 },      // –ù–µ–æ–±—ã—á–Ω—ã–π, —Å—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∏–π
    { icon: '‚≠ê', weight: 4, name: 'star', label: 'STAR', value: 15 },      // –û–±—ã—á–Ω—ã–π, —Å—Ä–µ–¥–Ω–∏–π
    { icon: 'üîî', weight: 4, name: 'bell', label: 'BELL', value: 10 },      // –û–±—ã—á–Ω—ã–π, –Ω–∏–∑–∫–∏–π
    { icon: 'üçí', weight: 5, name: 'cherry', label: 'CHRY', value: 5 }      // –ß–∞—Å—Ç—ã–π, —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π
];

let balance = 100;
let currentBet = 10;

const slots = Array.from(document.querySelectorAll('.slot'));
const spinButton = document.getElementById('spinButton');
const balanceDisplay = document.getElementById('balance');
const currentBetDisplay = document.getElementById('currentBet');
const increaseBetBtn = document.getElementById('increaseBet');
const decreaseBetBtn = document.getElementById('decreaseBet');
const depositButton = document.getElementById('depositButton');
const withdrawButton = document.getElementById('withdrawButton');
const winModal = document.getElementById('winModal');
const winAmountDisplay = document.getElementById('winAmount');
const closeModalBtn = document.getElementById('closeModal');
const infoButton = document.getElementById('infoButton');
const infoContent = document.getElementById('infoContent');

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
let sessionStartTime = Date.now();
let totalSpins = 0;
let totalBets = 0;
let totalWins = 0;
let consecutiveLosses = 0;
let biggestWin = 0;
let lastDepositAmount = 0;
let depositsCount = 0;
let totalDeposits = 0;          // –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
let maxWinStreak = 0;          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π
let currentWinStreak = 0;      // –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π
let lastWinAmount = 0;         // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à
let betIncreaseCount = 0;      // –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏–≥—Ä–æ–∫ –ø–æ–≤—ã—à–∞–ª —Å—Ç–∞–≤–∫—É
let timeSpentPlaying = 0;      // –í—Ä–µ–º—è –∏–≥—Ä—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
let startPlayTime = Date.now();

function getRandomSymbol() {
    const totalWeight = symbols.reduce((sum, symbol) => sum + symbol.weight, 0);
    let random = Math.random() * totalWeight;
    
    for (const symbol of symbols) {
        random -= symbol.weight;
        if (random <= 0) {
            return symbol.icon;
        }
    }
    return symbols[0].icon;
}

function getSymbolMultiplier(symbolIcon) {
    const symbolData = symbols.find(s => s.icon === symbolIcon);
    if (!symbolData) return 5;
    return symbolData.value;
}

function getSymbolLabel(symbolIcon) {
    const symbolData = symbols.find(s => s.icon === symbolIcon);
    return symbolData ? symbolData.label : '????';
}

function checkWin(results) {
    let totalWin = 0;
    const winningCombinations = [];
    
    function addWinningCombo(type, symbol, multiplier, win, position) {
        winningCombinations.push({ 
            type, 
            symbol, 
            multiplier, 
            win,
            position 
        });
        totalWin += win;
    }

    const symbolPositions = {};
    results.forEach((symbol, index) => {
        if (!symbolPositions[symbol]) {
            symbolPositions[symbol] = [];
        }
        symbolPositions[symbol].push(index + 1);
    });

    for (const [symbol, positions] of Object.entries(symbolPositions)) {
        if (positions.length >= 2) {
            const baseMultiplier = getSymbolMultiplier(symbol);
            
            if (positions.length === 5) {
                const win = currentBet * baseMultiplier;
                addWinningCombo('5x', symbol, baseMultiplier, win, '–≤—Å–µ –æ–∫–Ω–∞');
                break;
            }
            else if (positions.length === 4) {
                const multiplier = baseMultiplier * 0.4;
                const win = Math.floor(currentBet * multiplier);
                addWinningCombo('4x', symbol, multiplier, win, `–æ–∫–Ω–∞ ${positions.join('-')}`);
            }
            else if (positions.length === 3) {
                const multiplier = baseMultiplier * 0.2;
                const win = Math.floor(currentBet * multiplier);
                addWinningCombo('3x', symbol, multiplier, win, `–æ–∫–Ω–∞ ${positions.join('-')}`);
            }
            else if (positions.length === 2) {
                const multiplier = baseMultiplier * 0.1;
                const win = Math.floor(currentBet * multiplier);
                addWinningCombo('2x', symbol, multiplier, win, `–æ–∫–Ω–∞ ${positions.join('-')}`);
            }
        }
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æÔøΩÔøΩ–æ –≤—ã–∏–≥—Ä—ã—à–∞
    if (lastDepositAmount && totalWin > lastDepositAmount * 0.3) {
        const limitedWin = Math.floor(lastDepositAmount * 0.3);
        const ratio = limitedWin / totalWin;
        winningCombinations.forEach(combo => {
            combo.win = Math.floor(combo.win * ratio);
        });
        totalWin = limitedWin;
    }

    return { totalWin, combinations: winningCombinations };
}

function updateBalance(amount) {
    balance += amount;
    balanceDisplay.textContent = balance;
    spinButton.disabled = balance < currentBet;
    withdrawButton.disabled = balance <= 0;
}

function updateBet(amount) {
    currentBet = Math.max(10, Math.min(100, amount));
    currentBetDisplay.textContent = currentBet;
    spinButton.disabled = balance < currentBet;
}

function createSlotContent(slot) {
    const wrapper = document.createElement('div');
    wrapper.className = 'slot-wrapper';
    wrapper.style.transition = 'none';
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –∑–∞–ø–∞—Å–æ–º
    for (let i = 0; i < 10; i++) {
        const symbolDiv = document.createElement('div');
        symbolDiv.className = 'symbol';
        symbolDiv.textContent = getRandomSymbol();
        wrapper.appendChild(symbolDiv);
    }
    
    slot.innerHTML = '';
    slot.appendChild(wrapper);
    return wrapper;
}

function animateSlot(slot, finalSymbol, duration) {
    return new Promise(resolve => {
        const wrapper = createSlotContent(slot);
        const symbols = wrapper.children;
        let currentPos = 0;
        const totalSpins = 6;
        const interval = duration / totalSpins;
        const stepSize = 87;
        let speed = 0;
        let acceleration = 0.8;
        let maxSpeed = 35;
        let isSlowingDown = false;
        let lastTime = performance.now();
        let finalSequenceAdded = false;

        function animate(currentTime) {
            const deltaTime = currentTime - lastTime;
            lastTime = currentTime;

            if (!isSlowingDown) {
                speed = Math.min(speed + acceleration, maxSpeed);
            } else {
                speed = Math.max(speed - acceleration * 0.4, 0);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
                if (!finalSequenceAdded && speed < maxSpeed * 0.5) {
                    finalSequenceAdded = true;
                    for (let i = 0; i < 7; i++) {
                        const newSymbol = document.createElement('div');
                        newSymbol.className = 'symbol';
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –ª–∏–Ω–∏–∏
                        newSymbol.textContent = i === 1 ? finalSymbol : getRandomSymbol();
                        wrapper.appendChild(newSymbol);
                    }
                }
            }

            currentPos += speed;
            
            if (currentPos >= stepSize * 5) {
                currentPos = 0;
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã
                for (let i = 0; i < 5; i++) {
                    if (wrapper.children.length > 7) {
                        wrapper.removeChild(wrapper.children[0]);
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª
                        const newSymbol = document.createElement('div');
                        newSymbol.className = 'symbol';
                        newSymbol.textContent = getRandomSymbol();
                        wrapper.appendChild(newSymbol);
                    }
                }
            }

            wrapper.style.transform = `translateY(${currentPos}px)`;

            if (speed > 0.1) {
                requestAnimationFrame(animate);
            } else if (isSlowingDown) {
                wrapper.style.transform = 'translateY(0)';
                
                while (wrapper.children.length > 7) {
                    wrapper.removeChild(wrapper.children[0]);
                }
                
                // Set the final symbol exactly where the red line is
                symbols[2].textContent = finalSymbol; // Position 2 is where the red line is
                
                resolve();
            } else {
                requestAnimationFrame(animate);
            }
        }

        requestAnimationFrame(animate);

        setTimeout(() => {
            isSlowingDown = true;
        }, duration * 0.6);
    });
}

function spin() {
    if (balance < currentBet) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
        return;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –±–æ–ª—å—à–æ–º –ø–ª—é—Å–µ, —Å–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
    if (balance > lastDepositAmount * 1.5) {
        symbols[0].weight = 1;  // –°–∏–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è 7Ô∏è‚É£
        symbols[1].weight = 1;  // –°–∏–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è üíé
        symbols[2].weight = 2;  // –°–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è üé∞
    } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ –≤–µ—Å–∞
        symbols[0].weight = 1;
        symbols[1].weight = 2;
        symbols[2].weight = 3;
    }

    totalSpins++;
    totalBets += currentBet;

    const winChance = calculateWinChance();
    const willWin = Math.random() < winChance;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    let maxPossibleWin = currentBet * 2;
    if (balance > lastDepositAmount * 1.5) {
        maxPossibleWin = currentBet * 1.2; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ –±–æ–ª—å—à–æ–º –ø–ª—é—Å–µ
    }

    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏...
    spinButton.disabled = true;
    updateBalance(-currentBet);

    const finalSymbols = slots.map(() => {
        if (willWin) {
            // –ï—Å–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∏–≥—Ä—ã—à, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const highValueSymbols = symbols.slice(0, 3);
            return highValueSymbols[Math.floor(Math.random() * highValueSymbols.length)].icon;
        }
        return getRandomSymbol();
    });

    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å–ø–∏–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    const promises = slots.map((slot, index) => 
        animateSlot(slot, finalSymbols[index], 3000 + (index * 400))
    );

    Promise.all(promises).then(() => {
        const result = checkWin(finalSymbols);
        
        if (result.totalWin > 0) {
            consecutiveLosses = 0;
            totalWins += result.totalWin;
            biggestWin = Math.max(biggestWin, result.totalWin);
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —É–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø–∏–Ω—ã
            if (result.totalWin > lastDepositAmount * 0.5) {
                symbols[0].weight = 1;  // –£–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è 7Ô∏è‚É£
                symbols[1].weight = 2;  // –£–º–µ–Ω—å—à–∞–µ–º —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è üíé
            }
            
            showWinModal(result.totalWin, result.combinations);
            updateBalance(result.totalWin);
        } else {
            consecutiveLosses++;
        }
        
        // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —Å—Ç–∞–ª –º–µ–Ω—å—à–µ 30% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å—ã
        if (balance < lastDepositAmount * 0.3) {
            symbols[0].weight = 2;
            symbols[1].weight = 3;
        }
        
        spinButton.disabled = balance < currentBet;
    });
}

function deposit() {
    const amount = parseInt(prompt('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (‚ÇΩ):'));
    if (amount && amount > 0) {
        lastDepositAmount = amount;
        totalDeposits += amount;
        depositsCount++;
        
        // –î–∞–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
        if (depositsCount === 1) {
            startPlayTime = Date.now(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
            currentWinStreak = 0;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞, –¥–∞–µ–º —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–Ω—Å
        if (balance < lastDepositAmount * 0.2) {
            setTimeout(() => {
                alert("–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –°–ª–µ–¥—É—é—â–∏–µ 5 —Å–ø–∏–Ω–æ–≤ –±—É–¥—É—Ç —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à!");
            }, 1000);
        }

        updateBalance(amount);
    }
}

function withdraw() {
    if (balance <= 0) {
        alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞');
        return;
    }
    const amount = parseInt(prompt('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (‚ÇΩ):'));
    if (amount && amount > 0 && amount <= balance) {
        updateBalance(-amount);
        alert(`–í—ã –≤—ã–≤–µ–ª–∏ ‚ÇΩ${amount}`);
    } else {
        alert('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞');
    }
}

function showWinModal(amount, combinations) {
    winAmountDisplay.textContent = amount;
    
    const modalContent = winModal.querySelector('.modal-content');
    modalContent.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    const winAnimation = document.createElement('div');
    winAnimation.className = 'win-animation';
    winAnimation.textContent = 'üéâ';
    modalContent.appendChild(winAnimation);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.createElement('h2');
    title.textContent = '–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!';
    modalContent.appendChild(title);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞
    const winText = document.createElement('p');
    winText.innerHTML = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <span id="winAmount">${amount}</span>‚ÇΩ`;
    modalContent.appendChild(winText);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    const combinationsDiv = document.createElement('div');
    combinationsDiv.className = 'win-combinations';
    combinationsDiv.style.textAlign = 'left';
    combinationsDiv.style.marginBottom = '20px';
    
    combinations.forEach(combo => {
        const comboText = document.createElement('p');
        comboText.style.marginBottom = '10px';
        comboText.innerHTML = `${combo.symbol} ${combo.type} (${combo.position}): <span style="color: #2ecc71">+${combo.win}</span>`;
        combinationsDiv.appendChild(comboText);
    });
    
    modalContent.appendChild(combinationsDiv);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É OK
    const okButton = document.createElement('button');
    okButton.id = 'closeModal';
    okButton.textContent = 'OK';
    okButton.addEventListener('click', hideWinModal);
    modalContent.appendChild(okButton);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    winModal.style.display = 'flex';
    // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
    winModal.offsetHeight;
    winModal.classList.add('show');
}

function hideWinModal() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    winModal.classList.add('hiding');
    winModal.classList.remove('show');
    
    // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω—ã–º —Å–∫—Ä—ã—Ç–∏–µ–º
    setTimeout(() => {
        winModal.style.display = 'none';
        winModal.classList.remove('hiding');
    }, 300); // –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é transition –≤ CSS
}

// Event Listeners
spinButton.addEventListener('click', spin);
depositButton.addEventListener('click', deposit);
withdrawButton.addEventListener('click', withdraw);
increaseBetBtn.addEventListener('click', () => updateBet(currentBet + 10));
decreaseBetBtn.addEventListener('click', () => updateBet(currentBet - 10));
closeModalBtn.addEventListener('click', hideWinModal);
winModal.addEventListener('click', (e) => {
    if (e.target === winModal) {
        hideWinModal();
    }
});

infoButton.addEventListener('click', () => {
    infoContent.classList.toggle('show');
    infoButton.textContent = infoContent.classList.contains('show') 
        ? '–°–ö–†–´–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ' 
        : '–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–´–ò–ì–†–´–®–ê–•';
});

// Initialize
updateBalance(0);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
slots.forEach(slot => {
    createSlotContent(slot);
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞
function calculateWinChance() {
    const betRatio = currentBet / balance;
    const profitRatio = (balance - lastDepositAmount) / lastDepositAmount;
    
    let baseChance = 0.35; // –°–Ω–∏–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –¥–æ 35%

    // –ö–æ–Ω—Ç—Ä–æ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    if (balance > lastDepositAmount * 1.2) {
        baseChance *= 0.5; // –†–µ–∑–∫–æ —Å–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å—ã –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ 20%
    }

    // –°–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å—ã –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —Å—Ç–∞–≤–∫–∞—Ö
    if (betRatio > 0.2) {
        baseChance *= 0.7;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –º–∏–Ω—É—Å–µ, –¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à–∞–Ω—Å –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è
    if (balance < lastDepositAmount * 0.5) {
        baseChance *= 1.2;
    }

    // –°–Ω–∏–∂–∞–µ–º —à–∞–Ω—Å—ã —Å –∫–∞–∂–¥—ã–º —Å–ø–∏–Ω–æ–º
    baseChance *= Math.max(0.5, 1 - (totalSpins * 0.01));

    return Math.max(0.1, Math.min(0.4, baseChance));
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
function suggestBetIncrease() {
    if (currentWinStreak >= 2 && currentBet < balance * 0.3) {
        setTimeout(() => {
            alert("–£–¥–∞—á–Ω–∞—è —Å–µ—Ä–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞!");
        }, 1000);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
function showDepositSuggestion() {
    if (balance < currentBet) {
        const suggestion = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ ${currentBet * 10}‚ÇΩ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ —Å–ø–∏–Ω—ã!`;
        alert(suggestion);
    }
}